name: Deploy API

on:
  push:
    branches:
      - main

jobs:
  get_next_version:
    runs-on: ubuntu-latest
    name: Determine release
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - uses: actions/checkout@v3
      - id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          dry_run: true
          working_directory: .github/fetch_version
      - run: echo ${{ steps.semantic.outputs.new_release_version }}
      - run: echo ${{ steps.semantic.outputs.new_release_published }}

  docker:
    name: Build and Publish Docker Images
    runs-on: ubuntu-latest
    needs:
      - get_next_version
    if: needs.get_next_version.outputs.new_release_published == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: europe-west6-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.TF_DEPLOYER_KEY }}
      - uses: docker/setup-buildx-action@v2
      - name: Build and Push API images for version ${{ needs.get_next_version.outputs.new_release_version }}
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Dockerfile
          push: true
          build-args: |
            BUILD_VERSION=${{ needs.get_next_version.outputs.new_release_version }}
            COMMIT_SHA=${{ github.sha }}
          tags: |
            ghcr.io/smartive-education/cas-fee-adv-qwacker-api:${{ github.sha }}
            ghcr.io/smartive-education/cas-fee-adv-qwacker-api:${{ needs.get_next_version.outputs.new_release_version }}
            ghcr.io/smartive-education/cas-fee-adv-qwacker-api:${{ needs.get_next_version.outputs.new_release_major_version }}.${{ needs.get_next_version.outputs.new_release_minor_version }}
            ghcr.io/smartive-education/cas-fee-adv-qwacker-api:${{ needs.get_next_version.outputs.new_release_major_version }}-latest
            ghcr.io/smartive-education/cas-fee-adv-qwacker-api:latest
            europe-west6-docker.pkg.dev/ost-cas-adv-fee/qwacker-api-docker/cas-fee-adv-qwacker-api:${{ github.sha }}
            europe-west6-docker.pkg.dev/ost-cas-adv-fee/qwacker-api-docker/cas-fee-adv-qwacker-api:${{ needs.get_next_version.outputs.new_release_version }}
            europe-west6-docker.pkg.dev/ost-cas-adv-fee/qwacker-api-docker/cas-fee-adv-qwacker-api:${{ needs.get_next_version.outputs.new_release_major_version }}.${{ needs.get_next_version.outputs.new_release_minor_version }}
            europe-west6-docker.pkg.dev/ost-cas-adv-fee/qwacker-api-docker/cas-fee-adv-qwacker-api:${{ needs.get_next_version.outputs.new_release_major_version }}-latest
            europe-west6-docker.pkg.dev/ost-cas-adv-fee/qwacker-api-docker/cas-fee-adv-qwacker-api:latest
      - name: Build and Push grpc web proxy image for version ${{ needs.get_next_version.outputs.new_release_version }}
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./grpc-web-proxy.dockerfile
          push: true
          tags: |
            europe-west6-docker.pkg.dev/ost-cas-adv-fee/qwacker-api-docker/cas-fee-adv-qwacker-grpcwebproxy:${{ needs.get_next_version.outputs.new_release_version }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - get_next_version
      - docker
    if: needs.get_next_version.outputs.new_release_published == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: create release
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy API on Google Cloud Platform
    runs-on: ubuntu-latest
    needs:
      - get_next_version
      - docker
    if: needs.get_next_version.outputs.new_release_published == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Google Cloud Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.TF_DEPLOYER_KEY }}'
      - uses: hashicorp/setup-terraform@v2
      - run: terraform init
        working-directory: infrastructure/prod
      - name: store zitadel access key
        run: echo '${{ secrets.ZITADEL_TF_DEPLOYER_KEY }}' > ./zitadel.json
        working-directory: infrastructure/prod
      - run: terraform apply -auto-approve
        working-directory: infrastructure/prod
        env:
          TF_VAR_release_version: ${{ needs.get_next_version.outputs.new_release_version }}
          TF_VAR_zitadel_key_path: zitadel.json
